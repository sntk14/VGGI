// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix, normalMat;
uniform float shininess;
uniform vec3 lightColor;
uniform vec3 lightPosition;

varying vec4 color;


vec3 calc_light(vec3 lightColor, vec3 normal, vec3 lightDirection) {
    float strength = 0.2;

    float maxND = max(dot(normal, lightDirection), 0.0);
    vec3 refD = reflect(-lightDirection, normal);
    float sp = pow(max(dot(lightDirection, refD), 0.0), 32.);

    return strength * lightColor + maxND * lightColor + strength * sp * lightColor;
}

void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec3 normal = normalize(vec3(normalMat * vec4(normal, 0.0)));
    vec3 lightDirection = normalize(lightPosition - vertPos);

    vec3 calculated_light = calc_light(lightColor, normal, lightDirection);

    gl_Position = vertPos4;
    color = vec4(calculated_light, 1.);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec4 color;
void main() {
    gl_FragColor = color;
}`;